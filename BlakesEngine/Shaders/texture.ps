Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
    float4 ambientColour;
    float4 diffuseColour;
    float3 lightDirection;
    float padding;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float3 normal : NORMAL;
	float2 tex : TEXCOORD0;
};

float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColour;
    float3 lightDir;
    float lightIntensity;
    float4 colour;

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColour = shaderTexture.Sample(SampleType, input.tex);

	//Invert the light direction for calculations.
	lightDir = -lightDirection;

	// Calculate the amount of light on this pixel.
	lightIntensity = saturate(dot(input.normal, lightDir));

	colour = ambientColour;

	if (lightIntensity > 0.f)
	{
		colour += diffuseColour * lightIntensity;
	}

	// Multiply the texture pixel and the final diffuse color to get the final pixel color result.
	colour = saturate(colour) * textureColour;
	
	return colour;
}